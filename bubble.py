import random
import time

# Создаем функцию которая запрашивает количество чисел для сортировки, с диапазоном по умолчанию от 20 до 1000
def nask(amin=20, amax=1000):
    # Проверяем аргументы функции на соответствие диапазону по умолчанию и корректируем при необходимости
    if amin < 20:
        amin = 20
    if amax > 1000:
        amax = 1000
    print(f'Введите количество точек для сортировки в диапазоне от {amin} до {amax}:')
    # Просим пользователя ввести число объявив его типом int и обернув в обработку исключений try except
    # При вводе значения не соответствующего int обработка исключения, сообщает о неверном вводе и рекурсией вызывает эту же функцию по новой
    try:
        num = int(input('Введите количество точек и нажмите Enter: '))
    except:
        print('Введенное значение не является целым числом. Повторите ввод.')
        return nask(amin, amax)
    # Также делаем условную проверку соответствия введенного числа границам допустимого диапазона и просим повторить ввод при несоответствии
    # Если все проверки прошли успешно, функция возвращает целое число, которое ввел пользователь
    if num < amin:
        print(f'Введенное число меньше нижней границы диапазона {amin}-{amax}. Повторите ввод.')
        return nask(amin, amax)
    elif num > amax:
        print(f'Введенное число больше верхней границы диапазона {amin}-{amax}. Повторите ввод.')
        return nask(amin, amax)
    else:
        return num

# Генерируем список псевдослучайных чисел от 10000 до 99999, количеством равным заданному пользователем в функции nask
rannum = [random.randint(10000, 99999) for x in range(nask())]

# Создаем функцию сортировки пузырьком
def bub_sort(numlist):
    # Цикл проходит по всему массиву, запуская вложенный цикл, который также проходит по списку и попарно сранивает
    # элементы списка и меняет их местами так чтобы большее число было на позиции с большим индексом, т.е. ближе к концу списка
    for x in range(len(numlist)):
        for y in range(0, len(numlist)-x-1):
            if numlist[y] > numlist[y+1]:
                numlist[y], numlist[y+1] = numlist[y+1], numlist[y]

# Собственно выполняем сортировку ранее созданого списка чисел, замерив время начало и конца процесса для вывода его длительности
t1 = time.process_time()
bub_sort(rannum)
t2 = time.process_time() - t1

# Выводим требуемые данные (кол-во чисел в списке, время выполнения сортировки, сумму 10 наименьших чисел, сумму 10 наибольших чисел)
print(f'Количество чисел в сортируемом списке - {len(rannum)}')
# Время с точностью 3 знака после запятой
print(f'Сортировка выполнялась {t2:.3f} секунд.')
# Наименьшие - первые 10 элементов списка
print(f'Сумма 10 наименьших чисел в последовательности равна {sum(rannum[0:10])}')
# Наибольшие - 10 элементов отсчитаные с конца списка
print(f'Сумма 10 наибольших чисел в последовательности равна {sum(rannum[-1:-11:-1])}')